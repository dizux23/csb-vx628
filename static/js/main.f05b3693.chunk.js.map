{"version":3,"sources":["App.js","index.js"],"names":["useLerpedMouse","mouse","useThree","state","lerped","useRef","clone","previous","THREE","useFrame","copy","current","lerp","equals","performance","regress","YBot","props","ref","useState","FlakesTexture","texture","useGLTF","nodes","materials","rotation","y","x","Math","PI","dispose","castShadow","receiveShadow","geometry","Alpha_Surface","metalness","roughness","color","Alpha_Body_MAT","normalMap","normalScale","Alpha_Joints","Alpha_Joints_MAT","RectAreaLightUniformsLib","init","prototype","v","epsilon","abs","this","Lights","lights","intensity","position","distance","angle","penumbra","width","height","onUpdate","self","lookAt","Effects","blendMode","setBlendFunction","BlendFunction","SKIP","MULTIPLY","multisampling","radius","luminanceInfluence","bias","kernelSize","KernelSize","LARGE","luminanceThreshold","luminanceSmoothing","App","shadows","dpr","min","gl","alpha","antialias","camera","fov","near","far","attach","args","fallback","Text","fontSize","font","letterSpacing","scale","toneMapped","fog","envMapIntensity","AdaptiveDpr","ReactDOM","render","date","year","document","querySelector"],"mappings":"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","file":"static/js/main.f05b3693.chunk.js","sourcesContent":["import * as THREE from 'three'\nimport { Suspense, useRef, useState } from 'react'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { Text, useGLTF, AdaptiveDpr } from '@react-three/drei'\nimport { EffectComposer, SSAO, Bloom } from '@react-three/postprocessing'\nimport { KernelSize, BlendFunction } from 'postprocessing'\nimport { RectAreaLightUniformsLib, FlakesTexture } from 'three-stdlib'\n\n// This demo shows how to use react-three-fibers regression system\n// When call call state.regress() nothing really will happen, all it\n// does is setting a flag. But parts of the scene graph can now respond\n// to it in whatever way the want. Here we cause regression on mouse-move\n// and scale the pixel ratio as well as skipping some post-processing effects.\n\nRectAreaLightUniformsLib.init()\nTHREE.Vector2.prototype.equals = function (v, epsilon = 0.001) {\n  return Math.abs(v.x - this.x) < epsilon && Math.abs(v.y - this.y) < epsilon\n}\n\nfunction useLerpedMouse() {\n  const mouse = useThree((state) => state.mouse)\n  const lerped = useRef(mouse.clone())\n  const previous = new THREE.Vector2()\n  useFrame((state) => {\n    previous.copy(lerped.current)\n    lerped.current.lerp(mouse, 0.1)\n    // Regress system when the mouse is moved\n    if (!previous.equals(lerped.current)) state.performance.regress()\n  })\n  return lerped\n}\n\nfunction YBot(props) {\n  const ref = useRef()\n  const [texture] = useState(() => new THREE.CanvasTexture(new FlakesTexture(), THREE.UVMapping, THREE.RepeatWrapping, THREE.RepeatWrapping))\n  const { nodes, materials } = useGLTF('/untitled-draco2.glb')\n  const mouse = useLerpedMouse()\n  useFrame((state) => {\n    ref.current.rotation.y = (mouse.current.x * Math.PI) / 10\n    ref.current.rotation.x = (mouse.current.y * Math.PI) / 200\n  })\n  return (\n    <group ref={ref} dispose={null} {...props}>\n      <mesh castShadow receiveShadow geometry={nodes.Alpha_Surface.geometry}>\n        <meshStandardMaterial\n          metalness={0.4}\n          roughness={0.2}\n          color={materials.Alpha_Body_MAT.color}\n          normalMap={texture}\n          normalMap-repeat={[35, 35]}\n          normalScale={[0.15, 0.15]}\n        />\n      </mesh>\n      <mesh castShadow geometry={nodes.Alpha_Joints.geometry}>\n        <meshStandardMaterial metalness={1} roughness={0.1} color={materials.Alpha_Joints_MAT.color} />\n      </mesh>\n    </group>\n  )\n}\n\nconst Lights = () => {\n  const lights = useRef()\n  const mouse = useLerpedMouse()\n  useFrame((state) => {\n    lights.current.rotation.x = (mouse.current.x * Math.PI) / 2\n    lights.current.rotation.y = Math.PI * 0.25 - (mouse.current.y * Math.PI) / 2\n  })\n  return (\n    <>\n      <directionalLight intensity={1} position={[2, 2, 0]} color=\"red\" distance={5} />\n      <spotLight intensity={2} position={[-5, 10, 2]} angle={0.2} penumbra={1} castShadow shadow-mapSize={[2048, 2048]} />\n      <group ref={lights}>\n        <rectAreaLight intensity={2} position={[4.5, 0, -3]} width={10} height={10} onUpdate={(self) => self.lookAt(0, 0, 0)} />\n        <rectAreaLight intensity={2} position={[-10, 2, -10]} width={15} height={15} onUpdate={(self) => self.lookAt(0, 0, 0)} />\n      </group>\n    </>\n  )\n}\n\nfunction Effects() {\n  const ref = useRef()\n  useFrame((state) => {\n    // Disable SSAO on regress\n    ref.current.blendMode.setBlendFunction(state.performance.current < 1 ? BlendFunction.SKIP : BlendFunction.MULTIPLY)\n  }, [])\n  return (\n    <EffectComposer multisampling={8}>\n      <SSAO ref={ref} intensity={15} radius={10} luminanceInfluence={0} bias={0.035} />\n      <Bloom kernelSize={KernelSize.LARGE} luminanceThreshold={0.55} luminanceSmoothing={0.2} />\n    </EffectComposer>\n  )\n}\n\nexport default function App() {\n  return (\n    <Canvas\n      shadows\n      dpr={[1, 2]}\n      performance={{ min: 0.5 }}\n      gl={{ alpha: false, antialias: false }}\n      camera={{ position: [0, 0, 0.8], fov: 75, near: 0.5, far: 1 }}>\n      <color attach=\"background\" args={['lightblue']} />\n      <fog attach=\"fog\" args={['#000', 0.8, 1]} />\n      <Lights />\n      <Suspense fallback={null}>\n        <YBot position={[0, -1.3, 0]} />\n        <Text position={[0, 0, -0.2]} fontSize={0.6} color=\"white\" font=\"/noto.woff\" material-fog={false} letterSpacing={-0.1}>\n          ランブル\n        </Text>\n      </Suspense>\n      <mesh scale={4} position={[0, 1, -0.2]}>\n        <planeGeometry />\n        <meshStandardMaterial color=\"lightblue\" toneMapped={false} fog={false} envMapIntensity={0} />\n      </mesh>\n      <AdaptiveDpr />\n      <Effects />\n    </Canvas>\n  )\n}\n","import ReactDOM from 'react-dom'\nimport { Footer } from '@pmndrs/branding'\nimport './styles.css'\nimport App from './App'\n\nReactDOM.render(\n  <>\n    <App />\n    <Footer date=\"22. June\" year=\"2021\" />\n  </>,\n  document.querySelector('#root')\n)\n"],"sourceRoot":""}